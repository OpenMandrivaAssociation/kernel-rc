diff -up linux-6.13-rc7/drivers/regulator/devres.c.96~ linux-6.13-rc7/drivers/regulator/devres.c
--- linux-6.13-rc7/drivers/regulator/devres.c.96~	2025-01-12 23:37:56.000000000 +0100
+++ linux-6.13-rc7/drivers/regulator/devres.c	2025-01-13 17:13:20.392993059 +0100
@@ -772,6 +772,23 @@ static struct regulator *_devm_of_regula
 }
 
 /**
+ * devm_of_regulator_get - Resource managed of_regulator_get()
+ * @dev: device used for dev_printk() messages and resource lifetime management
+ * @node: device node for regulator "consumer"
+ * @id:  supply name or regulator ID.
+ *
+ * Managed of_regulator_get(). Regulators returned from this
+ * function are automatically regulator_put() on driver detach. See
+ * of_regulator_get() for more information.
+ */
+struct regulator *devm_of_regulator_get(struct device *dev, struct device_node *node,
+						 const char *id)
+{
+	return _devm_of_regulator_get(dev, node, id, NORMAL_GET);
+}
+EXPORT_SYMBOL_GPL(devm_of_regulator_get);
+
+/**
  * devm_of_regulator_get_optional - Resource managed of_regulator_get_optional()
  * @dev: device used for dev_printk() messages and resource lifetime management
  * @node: device node for regulator "consumer"
diff -up linux-6.13-rc7/drivers/regulator/of_regulator.c.96~ linux-6.13-rc7/drivers/regulator/of_regulator.c
--- linux-6.13-rc7/drivers/regulator/of_regulator.c.96~	2025-01-12 23:37:56.000000000 +0100
+++ linux-6.13-rc7/drivers/regulator/of_regulator.c	2025-01-13 17:13:20.393078751 +0100
@@ -683,6 +683,27 @@ struct regulator *_of_regulator_get(stru
 }
 
 /**
+ * of_regulator_get - get regulator via device tree lookup
+ * @dev: device used for dev_printk() messages
+ * @node: device node for regulator "consumer"
+ * @id: Supply name
+ *
+ * Return: pointer to struct regulator corresponding to the regulator producer,
+ *	   or PTR_ERR() encoded error number.
+ *
+ * This is intended for use by consumers that want to get a regulator
+ * supply directly from a device node. This will _not_ consider supply
+ * aliases. See regulator_dev_lookup().
+ */
+struct regulator *of_regulator_get(struct device *dev,
+					    struct device_node *node,
+					    const char *id)
+{
+	return _of_regulator_get(dev, node, id, NORMAL_GET);
+}
+EXPORT_SYMBOL_GPL(of_regulator_get);
+
+/**
  * of_regulator_get_optional - get optional regulator via device tree lookup
  * @dev: device used for dev_printk() messages
  * @node: device node for regulator "consumer"
diff -up linux-6.13-rc7/include/linux/regulator/consumer.h.96~ linux-6.13-rc7/include/linux/regulator/consumer.h
--- linux-6.13-rc7/include/linux/regulator/consumer.h.96~	2025-01-13 17:13:20.393180422 +0100
+++ linux-6.13-rc7/include/linux/regulator/consumer.h	2025-01-13 17:14:19.222206889 +0100
@@ -656,6 +656,12 @@ regulator_is_equal(struct regulator *reg
 #endif
 
 #if IS_ENABLED(CONFIG_OF) && IS_ENABLED(CONFIG_REGULATOR)
+struct regulator *__must_check of_regulator_get(struct device *dev,
+                                                struct device_node *node,
+                                                const char *id);
+struct regulator *__must_check devm_of_regulator_get(struct device *dev,
+                                                     struct device_node *node,
+                                                     const char *id);
 struct regulator *__must_check of_regulator_get_optional(struct device *dev,
 							 struct device_node *node,
 							 const char *id);
