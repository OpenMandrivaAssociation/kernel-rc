diff -up linux-6.3-rc2/drivers/virt/vboxdrv/r0drv/linux/memobj-r0drv-linux.c.omv~ linux-6.3-rc2/drivers/virt/vboxdrv/r0drv/linux/memobj-r0drv-linux.c
--- linux-6.3-rc2/drivers/virt/vboxdrv/r0drv/linux/memobj-r0drv-linux.c.omv~	2023-03-14 05:40:45.983107239 +0100
+++ linux-6.3-rc2/drivers/virt/vboxdrv/r0drv/linux/memobj-r0drv-linux.c	2023-03-14 05:41:43.985943112 +0100
@@ -1401,7 +1401,7 @@ DECLHIDDEN(int) rtR0MemObjNativeLockUser
             while (rc-- > 0)
             {
                 flush_dcache_page(pMemLnx->apPages[rc]);
-                papVMAs[rc]->vm_flags |= VM_DONTCOPY | VM_LOCKED;
+                vm_flags_set(papVMAs[rc], VM_DONTCOPY | VM_LOCKED);
             }
 
             LNX_MM_UP_READ(pTask->mm);
@@ -1872,11 +1872,7 @@ DECLHIDDEN(int) rtR0MemObjNativeMapUser(
                     rc = vm_insert_page(vma, ulAddrCur, pMemLnxToMap->apPages[iPage]);
                     /* Thes flags help making 100% sure some bad stuff wont happen (swap, core, ++).
                      * See remap_pfn_range() in mm/memory.c */
-#if    RTLNX_VER_MIN(3,7,0)
-                    vma->vm_flags |= VM_DONTEXPAND | VM_DONTDUMP;
-#else
-                    vma->vm_flags |= VM_RESERVED;
-#endif
+                    vm_flags_set(vma, VM_DONTEXPAND | VM_DONTDUMP);
 #elif RTLNX_VER_MIN(2,6,11)
                     rc = remap_pfn_range(vma, ulAddrCur, page_to_pfn(pMemLnxToMap->apPages[iPage]), PAGE_SIZE, fPg);
 #elif defined(VBOX_USE_PAE_HACK)
