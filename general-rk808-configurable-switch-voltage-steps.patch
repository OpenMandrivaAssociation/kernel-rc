diff -up linux-5.14-rc1/drivers/regulator/rk808-regulator.c.39~ linux-5.14-rc1/drivers/regulator/rk808-regulator.c
--- linux-5.14-rc1/drivers/regulator/rk808-regulator.c.39~	2021-07-12 00:07:40.000000000 +0200
+++ linux-5.14-rc1/drivers/regulator/rk808-regulator.c	2021-07-12 12:11:16.127005371 +0200
@@ -156,6 +156,7 @@
 
 struct rk808_regulator_data {
 	struct gpio_desc *dvs_gpio[2];
+	unsigned max_buck_steps_per_change;
 };
 
 static const struct linear_range rk808_ldo3_voltage_ranges[] = {
@@ -241,7 +242,8 @@ static int rk808_buck1_2_get_voltage_sel
 }
 
 static int rk808_buck1_2_i2c_set_voltage_sel(struct regulator_dev *rdev,
-					     unsigned sel)
+					     unsigned sel,
+					     int max_steps)
 {
 	int ret, delta_sel;
 	unsigned int old_sel, tmp, val, mask = rdev->desc->vsel_mask;
@@ -260,8 +262,8 @@ static int rk808_buck1_2_i2c_set_voltage
 	 * the risk of overshoot. Put it into a multi-step, can effectively
 	 * avoid this problem, a step is 100mv here.
 	 */
-	while (delta_sel > MAX_STEPS_ONE_TIME) {
-		old_sel += MAX_STEPS_ONE_TIME;
+	while (delta_sel > max_steps) {
+		old_sel += max_steps;
 		val = old_sel << (ffs(mask) - 1);
 		val |= tmp;
 
@@ -295,12 +297,13 @@ static int rk808_buck1_2_set_voltage_sel
 	struct rk808_regulator_data *pdata = rdev_get_drvdata(rdev);
 	int id = rdev_get_id(rdev);
 	struct gpio_desc *gpio = pdata->dvs_gpio[id];
+	int max_steps = pdata->max_buck_steps_per_change;
 	unsigned int reg = rdev->desc->vsel_reg;
 	unsigned old_sel;
 	int ret, gpio_level;
 
 	if (!gpio)
-		return rk808_buck1_2_i2c_set_voltage_sel(rdev, sel);
+		return rk808_buck1_2_i2c_set_voltage_sel(rdev, sel, max_steps);
 
 	gpio_level = gpiod_get_value(gpio);
 	if (gpio_level == 0) {
@@ -1278,6 +1281,12 @@ static int rk808_regulator_dt_parse_pdat
 				0 : tmp);
 	}
 
+	tmp = of_property_read_u32(client_dev->of_node, "max-buck-steps-per-change", &pdata->max_buck_steps_per_change);
+	if (tmp) {
+		pdata->max_buck_steps_per_change = MAX_STEPS_ONE_TIME;
+	}
+	dev_info(dev, "max buck steps per change: %d\n", pdata->max_buck_steps_per_change);
+
 dt_parse_end:
 	of_node_put(np);
 	return ret;
